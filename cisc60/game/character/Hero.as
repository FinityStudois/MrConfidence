package cisc60.game.character  {		import flash.display.MovieClip;	import flash.events.*;	import flash.display.Stage;		import cisc60.game.weapon.Bullet;	import cisc60.game.input.KeyboardControls;	import cisc60.game.util.ScrollScreen;			public class Hero extends MovieClip {				public var hero_speed;		public var max_speed;		public var jump;		public var fall;				public var falling:Boolean;				private static const FACING_RIGHT:String = "RIGHT";		private static const FACING_LEFT:String  = "LEFT";				public var mrc_stage:Stage;		private var hero_x:int;		private var hero_y:int;		private var facing:String;		private var life_percentage:int;//		private var max_speed:int;		private var jumping:Boolean;//		private var jump:int;				var enemies:Array = new Array();		var bullets:Array = new Array();				public function set_hero_x(hero_x:int): void { this.hero_x = hero_x; }		public function get_hero_x():int { return this.hero_x; }				public function set_hero_y(hero_y:int): void { this.hero_y = hero_y; }		public function get_hero_y():int { return this.hero_y; }				public function set_facing(facing:String): void { this.facing = facing; }		public function get_facing():String { return this.facing; }				public function set_life_percentage(life_per:int): void { this.life_percentage = life_per; }		public function get_life_percentage():int { return this.life_percentage }				public function set_max_speed(max_speed:int):void { this.max_speed = max_speed; }		public function get_max_speed():int { return this.max_speed; }				public function set_jumping(jumping:Boolean):void { this.jumping = jumping; }		public function get_jumping():Boolean { return this.jumping; }				public function set_jump(jump:int):void { this.jump = jump; }		public function get_jump():int { return this.jump; }							public var keyboard_controls:KeyboardControls;				/*Hero constructor*/		public function Hero(mrc_stage:Stage, pos_x:int, pox_y:int, bullets:Array) {											//trace("Hero stage: " + stage);			this.mrc_stage = mrc_stage			this.hero_x = pos_x;			this.hero_y = pox_y;						this.keyboard_controls = new KeyboardControls(this.mrc_stage);						this.facing = Hero.FACING_RIGHT 			this.hero_speed = 0;			this.max_speed = 15;			this.jumping = false;			this.jump = 0;			this.fall = 0;						this.bullets = bullets;			this.life_percentage = 100;								this.mrc_stage.addEventListener(Event.ENTER_FRAME, update_character_position)		}				/*shoot creates a new instance of Bullet, passing it the x and y values, and direction		our hero is facing.*/		public function shoot (){			var bullet:Bullet = new Bullet(x, y, facing);			bullets.push(bullet);			parent.addChild(bullets[bullets.length-1]);			//trace(bullets);		}				public function decreaseLife(){			this.set_life_percentage(this.get_life_percentage() - 5);		}				/*setDirection can be used to change the direction of the character*/		public function setDirection (dir:String){			if (dir == "LEFT"){				gotoAndStop(2);				facing = dir;			}			else {				gotoAndStop(1);				facing = "RIGHT";			}		}				private function update_character_position(e:Event) {						trace("Hero Position: " + this.x);			trace("SPEED: " + ScrollScreen.MAX_SPEED);												//trace("jumping: " + this.jumping);			//trace("falling: " + this.falling);			//trace("Jump: " +  this.jump);			//trace("Fall: " + this.fall);						this.hero_speed *= ScrollScreen.VELOCITY;			if(this.facing == Hero.FACING_RIGHT) {				if(this.hero_speed > 0)					this.facing = Hero.FACING_RIGHT;				 else if (this.hero_speed < 0) 					this.facing = Hero.FACING_LEFT;			}						if(this.facing == Hero.FACING_RIGHT) {					this.hero_x += this.hero_speed;				//scroll map			}						if(this.facing == Hero.FACING_LEFT) {					this.hero_x += this.hero_speed;				//scroll map			}						if(this.keyboard_controls.key_left) {				if(this.x > 50){					if(this.hero_speed > - ScrollScreen.MAX_SPEED);						this.hero_speed--;				}			}			else if(this.keyboard_controls.key_right) {				if(this.x < 400) {					if(this.hero_speed < ScrollScreen.MAX_SPEED)						this.hero_speed++;				}			}			else if(this.hero_speed < 1 && this.hero_speed > -1) {				this.hero_speed = 0;			}						if(this.keyboard_controls.key_up && !this.jumping && !this.falling) {				//this.jumping = true;			}					/*	if(this.jumping) {						this.hero_y -= this.jump;						this.jump += .5 ;												if(this.jump < 0) { this.jumping = false; this.falling = true; }					}					if(this.falling) {						this.hero_y += this.fall;						this.fall += .5 ;						if(this.fall > 5) {							fall = -5;							this.falling = false;						}					}										if(this.jump > 10) {						this.jumping = false;						this.falling = true;					}*/		}	}}